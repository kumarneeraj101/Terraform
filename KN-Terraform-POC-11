
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

//Providerclear

provider "aws" {
  region     = "us-east-1"
  access_key = "ABC"
  secret_key = "XYZ"
}



//Create VPC
resource "aws_vpc" "r-knpoc-vpc" {
  cidr_block       = "10.10.0.0/16"
  tags = {
    Name = "t_knpoc_vpc"
    availability_zone = "us-east-1a"
  }
}

//Crate Subnet
resource "aws_subnet" "r-knpoc-subnet" {
  vpc_id     = aws_vpc.r-knpoc-vpc.id
  cidr_block = "10.10.1.0/24"
  availability_zone = "us-east-1a"
  map_public_ip_on_launch = "true"

  tags = {
    Name = "t_knpoc_subnet"
  }
}

//Create Intrernet Gateway

resource "aws_internet_gateway" "r-knpoc-igw" {
  vpc_id = aws_vpc.r-knpoc-vpc.id

  tags = {
    Name = "t_knpoc_internet_gateway"
  }
}

//Create Route Table

resource "aws_route_table" "r-knpoc-route_table" {
  vpc_id = aws_vpc.r-knpoc-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.r-knpoc-igw.id
  }

  tags = {
    Name = "t_knpoc_route_table"
  }
}

// Associate Subnet with route table

resource "aws_route_table_association" "r-knpoc-route_table_association" {
  subnet_id      = aws_subnet.r-knpoc-subnet.id
  route_table_id = aws_route_table.r-knpoc-route_table.id 
}

////////////////////////////////////////////////
// Create Security Group
resource "aws_security_group" "r-knpoc-sg_all_ib_all_ob" {
  name        = "r-knpoc-sg_all_ib_all_ob"
  description = "Allow TLS inbound traffic and all outbound traffic"
  vpc_id      = aws_vpc.r-knpoc-vpc.id

  tags = {
    Name = "t-knpoc-sg_all_ib_all_ob"
  }
}

resource "aws_vpc_security_group_ingress_rule" "r-knpoc-sg_all_ib_ingress" {
  security_group_id = aws_security_group.r-knpoc-sg_all_ib_all_ob.id
  //cidr_ipv4         = aws_vpc.r-knpoc-vpc.cidr_block
  cidr_ipv4         =  "0.0.0.0/0"
  from_port         = 22
  ip_protocol       = "tcp"
  to_port           = 22
}

resource "aws_vpc_security_group_egress_rule" "r-knpoc-sg_all_ob_egress" {
  security_group_id = aws_security_group.r-knpoc-sg_all_ib_all_ob.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1" # semantically equivalent to all ports
}

resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv6" {
  security_group_id = aws_security_group.r-knpoc-sg_all_ib_all_ob.id
  cidr_ipv6         = "::/0"
  ip_protocol       = "-1" # semantically equivalent to all ports
}

////////////////////////////////////////////////


////////////////////////////////////////////////
// Create EC2 Instance Ansible Server and two node// 


resource "aws_instance" "using_terraform_knpoc_miz1_ansible-server" {
  ami           = "ami-01b799c439fd5516a"
  instance_type = "t3.micro"
  subnet_id = aws_subnet.r-knpoc-subnet.id  
  vpc_security_group_ids = [aws_security_group.r-knpoc-sg_all_ib_all_ob.id]
  availability_zone = "us-east-1a"


  tags = {
    Name = "t-knpoc-miz_ansible_server"
  }
}


resource "aws_instance" "using_terraform_knpoc_miz1_ansible_node1" {
  ami           = "ami-01b799c439fd5516a"
  instance_type = "t3.micro"
  subnet_id = aws_subnet.r-knpoc-subnet.id  
  vpc_security_group_ids = [aws_security_group.r-knpoc-sg_all_ib_all_ob.id]
  availability_zone = "us-east-1a"
  tags = {
    Name = "t-knpoc-miz_ansible_node1"
  }
}


resource "aws_instance" "using_terraform_knpoc_miz1_ansible_node2" {
  ami           = "ami-01b799c439fd5516a"
  instance_type = "t3.micro"
  subnet_id = aws_subnet.r-knpoc-subnet.id  
  vpc_security_group_ids = [aws_security_group.r-knpoc-sg_all_ib_all_ob.id]
  availability_zone = "us-east-1a"

  tags = {
    Name = "t-knpoc-miz_ansible_node2"
  }
}
// DONE- Create EC2 Instance Ansible Server and two node// 



